name: Deploy to GitHub Pages

on:
  workflow_run:
    workflows: ['Release']
    types:
      - completed
    branches:
      - master
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: 'pages'
  cancel-in-progress: false

jobs:
  check_changes:
    runs-on: ubuntu-latest
    outputs:
      should_build: ${{ steps.check.outputs.should_build }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for changes
        id: check
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "Workflow manually triggered, proceeding with build"
            echo "should_build=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          # For workflow_run events
          echo "Checking for changes in .stories.tsx files or landing directory"

          # Get the last successful commit for comparison
          git fetch origin master

          # Find the most recent commit that changed the relevant files
          CHANGES=$(git diff --name-only HEAD~10..HEAD | grep -E '\.stories\.tsx$|^landing/|^\.storybook/')

          if [ ! -z "$CHANGES" ]; then
            echo "Changes detected in .stories.tsx files, .storybook directory, or landing directory"
            echo "$CHANGES"
            echo "should_build=true" >> $GITHUB_OUTPUT
          else
            echo "No changes detected in .stories.tsx files, .storybook directory, or landing directory"
            echo "should_build=false" >> $GITHUB_OUTPUT
          fi

  build:
    runs-on: ubuntu-latest
    needs: check_changes
    if: needs.check_changes.outputs.should_build == 'true' && (github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success')
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Restore Bun cache
        uses: actions/cache@v4
        id: bun-cache # Give it an id to check if cache was hit later if needed
        with:
          path: ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      # Build the component library and Storybook
      - name: Install root dependencies
        run: bun install

      - name: Build component library
        run: bun run build

      - name: Build Storybook
        run: bun run build-storybook
        env:
          NODE_OPTIONS: '--max_old_space_size=4096'

      # Build the landing page (Vike site)
      - name: Install landing page dependencies
        working-directory: ./landing
        run: bun install

      - name: Build Vike site
        working-directory: ./landing
        run: bun run build

      # Prepare the deployment directory
      - name: Prepare deployment directory
        run: |
          mkdir -p ./deploy
          # Move Vike site to root of deployment directory
          cp -r ./landing/dist/client/* ./deploy/
          # Ensure Storybook directory exists
          mkdir -p ./deploy/storybook
          # Move Storybook to /storybook subfolder
          cp -r ./storybook-static/* ./deploy/storybook/
          # Create CNAME file for the custom domain
          echo "ui.bizar.re" > ./deploy/CNAME

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./deploy

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
